<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="OutDir;Configuration">
  <!-- This file is imported by all projects at the beginning of the project files -->
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"
          Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props') AND '$(MSBuildProjectExtension)' != '.vcxproj'" />

  <!-- Path settings -->
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">12.0</VisualStudioVersion>
    <VisualStudioReferenceMajorVersion>12</VisualStudioReferenceMajorVersion>
    <VisualStudioReferenceAssemblyVersion Condition="'$(VisualStudioReferenceAssemblyVersion)' == ''">$(VisualStudioReferenceMajorVersion).0.0.0</VisualStudioReferenceAssemblyVersion>
    <VisualStudioCodename>Dev$(VisualStudioReferenceMajorVersion)</VisualStudioCodename>

    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <MinimumVisualStudioVersion>$(VisualStudioVersion)</MinimumVisualStudioVersion>

    <VSLToolsPath Condition="'$(VSLToolsPath)' == ''">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\..'))</VSLToolsPath>
    <VSLTargetsPath Condition="'$(VSLTargetsPath)' == ''">$(MSBuildThisFileDirectory)</VSLTargetsPath>

    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>

    <SignAssembly Condition="'$(SignAssembly)' == ''">true</SignAssembly>

    <MajorRoslynVersion>0.6</MajorRoslynVersion>
  </PropertyGroup>
  
    <!-- Build reliability -->
  <PropertyGroup>
    <OverwriteReadOnlyFiles Condition="'$(OverwriteReadOnlyFiles)' == ''">true</OverwriteReadOnlyFiles>
  </PropertyGroup>

  <!-- Build settings for Open Source preview package -->
  <PropertyGroup Condition="'$(OpenSourceDebug)' == 'true'">
    <DeployVSVersion>12.0</DeployVSVersion>
    <DeployVSHive>Roslyn</DeployVSHive>
    <DeployToPackageFolders>true</DeployToPackageFolders>
    <DelaySignBuild Condition="'$(DelaySignBuild)' == ''">true</DelaySignBuild>
    <NonShipping Condition="'$(NonShipping)' == ''">false</NonShipping>
    <BuildVersion>0.6.0.0</BuildVersion>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(BuildVersion)' != ''">
      <!-- The user specified a build version number. In that case, we'll use their version number
           for the file version, and force the assembly version to $(MajorRoslynVersion).0.0.  That way
           day-to-day upgrades don't break assembly references to other installed apps. -->
      <PropertyGroup>
        <AssemblyVersion>$(MajorRoslynVersion).0.0</AssemblyVersion>
      </PropertyGroup>
    </When>

    <When Condition="'$(BuildNumber)' != ''">
      <!-- The user specified a build number, so we should use that. -->
      <PropertyGroup>
        <AssemblyVersion>$(MajorRoslynVersion).0.0</AssemblyVersion>
        <BuildVersion>$(MajorRoslynVersion).$(BuildNumber)</BuildVersion>
      </PropertyGroup>
    </When>

    <!-- If this is real-signed build being ran through TeamBuild, then use a real version number -->
    <When Condition="'$(LineupModuleVersion)' != '' AND '$(BuildingWithTeamBuild)' == 'true' AND ('$(RealSignBuild)' == 'true' OR '$(DelaySignBuild)' == 'true')">
      <PropertyGroup>
        <AssemblyVersion>$(MajorRoslynVersion).0.0</AssemblyVersion>
        <!-- The LineupModuleVersion looks like yyyy.mm.dd.rev -->
        <BuildVersion>$(MajorRoslynVersion).$(LineupModuleVersion.Substring(3, 1))$(LineupModuleVersion.Substring(5, 2))$(LineupModuleVersion.Substring(8))</BuildVersion>
      </PropertyGroup>
    </When>

    <When Condition="'$(RealSignBuild)' == 'true' OR '$(DelaySignBuild)' == 'true'">
      <!-- We're real-signing the build, but don't have a build number. Just use the MajorRoslynVersion.
           This happens if the build template does not pass BuildNumber down to MSBuild. -->
      <PropertyGroup>
        <AssemblyVersion>$(MajorRoslynVersion).0.0</AssemblyVersion>
        <BuildVersion>$(MajorRoslynVersion).0.0</BuildVersion>
      </PropertyGroup>
    </When>
    
    <Otherwise>
      <!-- No build version was supplied.  We'll use a special version, higher than anything
           installed, so that the assembly identity is different.  This will allows us to 
           have a build with an actual number installed, but then build and F5 a build with 
           this number.  -->
      <PropertyGroup>
        <BuildVersion>42.42.42.42</BuildVersion>
        <AssemblyVersion>42.42.42.42</AssemblyVersion>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Returns the current build version. Used in .vsixmanifests to substitute our build version into them -->
  <Target Name="GetBuildVersion" Outputs="$(BuildVersion)" />

  <!-- NuGet version -->
  <PropertyGroup>
    <!--

http://docs.nuget.org/docs/Reference/Versioning

"-beta" suffix indicates a pre-release package. Since we're not RTM, we need to specify pre-release for all 
packages we release unless they're stable/production quality. Also since we depend on a pre-release package, 
we MUST ourselves be a pre-release package.

See how Microsoft.Bcl.Immutable indicates that it is pre-release:
https://www.nuget.org/packages/Microsoft.Bcl.Immutable/1.1.15-beta

NuGet doesn't support pre-release packages with four digit groups, so we artificially compress our two last
digit groups into a single (third) digit group, which is the build date and the revision number (1-99).
It's unlikely we'll ever have more than 99 signed builds a day.

 -->
    <BuildVersionPart3 Condition="($(BuildVersion) != '') AND ($(BuildVersion.Split('.').Length) == 4)">$(BuildVersion.Split('.')[2])</BuildVersionPart3>
    <BuildVersionPart4 Condition="($(BuildVersion) != '') AND ($(BuildVersion.Split('.').Length) == 4)">$(BuildVersion.Split('.')[3])</BuildVersionPart4>
    <NuGetVersion Condition="($(BuildVersionPart3) != '') AND ($(BuildVersionPart4) != '')">$(MajorRoslynVersion).$(BuildVersionPart3)$(BuildVersionPart4.PadLeft(2, '0'))-beta</NuGetVersion>
    <NuGetVersion Condition="$(NuGetVersion) == ''">$(MajorRoslynVersion).0-beta</NuGetVersion>
  </PropertyGroup>
  
  <!-- Project language -->
  <PropertyGroup Condition="'$(ProjectLanguage)' == ''">
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.csproj' OR '$(Language)' == 'C#'">CSharp</ProjectLanguage>
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.vbproj' OR '$(Language)' == 'VB'">VB</ProjectLanguage>
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.vcxproj' OR '$(Language)' == 'C++'">C++</ProjectLanguage>
    <ProjectLanguage Condition="'$(MSBuildProjectExtension)' == '.wixproj'">WiX</ProjectLanguage>
  </PropertyGroup>

  <!-- Common project settings -->
  <PropertyGroup>
    <DeployToSamplesSubfolder Condition="'$(DeployToSamplesSubfolder)' == ''">false</DeployToSamplesSubfolder>

    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <StyleCopOverrideSettingsFile Condition="'$(StyleCopOverrideSettingsFile)' == ''">$(VSLToolsPath)\StyleCop\Settings.StyleCop</StyleCopOverrideSettingsFile>
    <StyleCopTreatErrorsAsWarnings>false</StyleCopTreatErrorsAsWarnings>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OutDir)' == ''">
    <!-- If we don't already have an OutDir, set one-->
    <OutDir>Binaries\$(Configuration)\</OutDir>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Capture the root, so we'll always have it even if we're building to a sub-folder -->
    <!-- TODO: choose a less crappy name -->
    <VSLOutDir>$(OutDir)</VSLOutDir>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DeployToSamplesSubfolder)' == 'true'">
    <OutDir>$(OutDir)\Samples\$(MSBuildProjectName)</OutDir>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(Configuration)'=='DogfoodDebug' OR '$(Configuration)'=='DogfoodRelease'">
      <PropertyGroup>
        <!-- In the dogfood configurations, we'll pick up the binaries from program files (X86) -->
        <DogfoodCompilerDir>$([System.Environment]::GetFolderPath(SpecialFolder.ProgramFilesX86))\Microsoft Roslyn CTP\Binaries</DogfoodCompilerDir>

        <!-- enable dogfooding for this configuration -->
        <LiveLive>true</LiveLive>

        <!-- Reuse settings of old configuration -->
        <Configuration>$(Configuration.Replace("Dogfood",""))</Configuration>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <!-- otherwise they come from binaries\$(configuration)\dogfood -->
        <DogfoodCompilerDir>$(OutDir)\Dogfood</DogfoodCompilerDir>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Components folder -->
  <PropertyGroup>
    <ComponentsDir>$(VSLOutDir)\Components</ComponentsDir>
  </PropertyGroup>

  <Choose>
    <!-- VB specific settings -->
    <When Condition="'$(ProjectLanguage)' == 'VB'">
      <PropertyGroup>
        <MyType>Empty</MyType>
        <OptionCompare>Binary</OptionCompare>
        <OptionExplicit>On</OptionExplicit>
        <OptionInfer>On</OptionInfer>
        <OptionStrict>On</OptionStrict>
        <RootNamespace></RootNamespace>
        <VBRuntime>Embed</VBRuntime>
        <!-- disable the "already implemented by the base class" warning. Roslyn no longer emits this,
             so we do it for back compat if we build on the old compilers -->
        <NoWarn>42015</NoWarn>
      </PropertyGroup>
      <ItemGroup>
        <Import Include="Microsoft.VisualBasic" />
        <Import Include="System" />
        <Import Include="System.Collections" />
        <Import Include="System.Collections.Generic" />
        <Import Include="System.Diagnostics" />
        <Import Include="System.Linq" />
      </ItemGroup>
      <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
        <DebugSymbols>true</DebugSymbols>
        <DefineDebug>true</DefineDebug>
        <DefineTrace>true</DefineTrace>
        <DebugType>full</DebugType>
      </PropertyGroup>
      <PropertyGroup Condition="'$(Configuration)' == 'Release'">
        <DefineTrace>true</DefineTrace>
        <Optimize>true</Optimize>
        <DebugType>pdbonly</DebugType>
      </PropertyGroup>
    </When>

    <!-- C# specific settings -->
    <When Condition="'$(ProjectLanguage)' == 'CSharp'">
      <PropertyGroup>
        <WarningLevel>4</WarningLevel>
        <ErrorReport>prompt</ErrorReport>
        
        <!-- Suppress the following warnings by default for C# projects
                1591: So far we've chosen to implicitly implement interfaces and as a consequence
                      the methods are public.  We don't want to duplicate documentation for them 
                      and hence suppress this warning until we get closer to release and a more
                      thorough documentation story

        -->
        <NoWarn>1591</NoWarn>
      </PropertyGroup>
      <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
        <DebugSymbols>true</DebugSymbols>
        <DebugType>full</DebugType>
        <DefineConstants>DEBUG;TRACE</DefineConstants>
        <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
     </PropertyGroup>
      <PropertyGroup Condition="'$(Configuration)' == 'Release'">
        <DebugType>pdbonly</DebugType>
        <DefineConstants>TRACE</DefineConstants>
        <Optimize>true</Optimize>
      </PropertyGroup>
    </When>

    <!-- C++ specific settings -->
    <When Condition="'$(ProjectLanguage)' == 'C++'">
      <PropertyGroup>
        <!-- Put intermediate outputs in the same place as managed projects for sanity -->
        <IntDir>$(ProjectDir)obj\$(Configuration)\</IntDir>

        <!-- This is a little strange. Our only C++ project is totally native, but if we don't 
             specify a TFV of 4.5, it prompts for upgrade. So, add this to shut up the
             upgrader. -->
        <TargetFrameworkVersion Condition="'$(VisualStudioVersion)' == '11.0'">v4.5</TargetFrameworkVersion>

        <!-- We just always want to build with whatever toolset matches the VS you're building with -->
        <PlatformToolset Condition="'$(VisualStudioVersion)' == '11.0'">v110</PlatformToolset>
        <PlatformToolset Condition="'$(VisualStudioVersion)' == '12.0'">v120</PlatformToolset>
      </PropertyGroup>
    </When>

    <!-- WiX specific settings -->
    <When Condition="'$(ProjectLanguage)' == 'WiX'">
      <PropertyGroup>
        <IntermediateOutputPath>obj\$(Configuration)\</IntermediateOutputPath>
        <LinkerAdditionalOptions>-b binaries=$(OutDir)</LinkerAdditionalOptions>

        <DefineConstants>$(DefineConstants);BuildVersion=$(BuildVersion)</DefineConstants>

      </PropertyGroup>
    </When>
  </Choose>

  <PropertyGroup>
    <!-- ILASM is in the Framework  -->
    <IlasmPath>$(MSBuildFrameworkToolsPath)\ilasm.exe</IlasmPath>

    <!-- ILDASM and SN are in the Framework SDK tools path, but TargetFrameworkSDKToolsDirectory isn't always available  -->
    <IldasmPath Condition=" '$(TargetFrameworkSDKToolsDirectory)' != '' ">$(TargetFrameworkSDKToolsDirectory)\ildasm.exe</IldasmPath>
    <IldasmPath Condition=" '$(TargetFrameworkSDKToolsDirectory)' == '' ">$(MSBuildProgramFiles32)\Microsoft SDKs\Windows\v8.0A\bin\NETFX 4.0 Tools\ildasm.exe</IldasmPath>
    <SnToolPath Condition=" '$(TargetFrameworkSDKToolsDirectory)' != '' ">$(TargetFrameworkSDKToolsDirectory)\sn.exe</SnToolPath>
    <SnToolPath Condition=" '$(TargetFrameworkSDKToolsDirectory)' == '' ">$(MSBuildProgramFiles32)\Microsoft SDKs\Windows\v8.0A\bin\NETFX 4.0 Tools\sn.exe</SnToolPath>

    <EditBinToolPath>$(MSBuildProgramFiles32)\Microsoft Visual Studio $(VisualStudioVersion)\VC\bin\editbin.exe</EditBinToolPath>
  </PropertyGroup>

  <!-- Code Analysis settings -->

  <!-- 
    Disabling this until we can enable it without creating warnings 
  <PropertyGroup Condition="'$(Nonshipping)' != 'true'">
    <RunCodeAnalysis>true</RunCodeAnalysis>
    <CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  -->
</Project>
